// UICodeGenerator.cs
// UI代码生成器，用于自动生成UI组件绑定代码

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEditor.Compilation;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// UIDesigner数据结构，用于在组件被销毁后传递关键信息
/// </summary>
public class UIDesignerData
{
    public string uiFormName { get; set; }
    public string namespaceName { get; set; }
    public List<UGF.GameFramework.UI.UIComponentBinding> componentBindings { get; set; }
    public GameObject gameObject { get; set; }
}

namespace UGF.GameFramework.UI.Editor
{
    /// <summary>
    /// UI代码生成器
    /// </summary>
    public static class UICodeGenerator
    {
        /// <summary>
        /// 生成组件绑定类
        /// </summary>
        public static string GenerateBindingClass(string className, string namespaceName, List<UIComponentBinding> bindings)
        {
            var sb = new StringBuilder();
            
            // 文件头注释
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// 此文件由UIDesigner自动生成，请勿手动修改");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine();
            
            // 命名空间和引用
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEngine.UI;");
            sb.AppendLine("using UGF.GameFramework.UI;");
            
            // 检查是否需要TMPro命名空间
            bool needsTMPro = bindings.Any(b => b.IsValid() && 
                (b.ComponentType.Contains("TextMeshPro") || b.ComponentType.Contains("TMP")));
            if (needsTMPro)
            {
                sb.AppendLine("using TMPro;");
            }
            sb.AppendLine();
            
            // 命名空间声明
            if (!string.IsNullOrEmpty(namespaceName))
            {
                sb.AppendLine($"namespace {namespaceName}");
                sb.AppendLine("{");
            }
            
            // 类定义
            string indent = !string.IsNullOrEmpty(namespaceName) ? "    " : "";
            sb.AppendLine($"{indent}public partial class {className} : UIFormBase");
            sb.AppendLine($"{indent}{{");
            
            // 生成序列化字段
            foreach (var binding in bindings)
            {
                if (binding.IsValid())
                {
                    sb.AppendLine($"{indent}    {binding.GetSerializedFieldDeclaration()}");
                }
            }
            
            sb.AppendLine();
            
            // 生成公共属性
            foreach (var binding in bindings)
            {
                if (binding.IsValid())
                {
                    sb.AppendLine($"{indent}    {binding.GetPropertyDeclaration()}");
                }
            }
            
            sb.AppendLine();
            
            // 生成BindComponents方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 绑定UI组件（自动生成）");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    protected override void BindComponents()");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.BindComponents();");
            sb.AppendLine($"{indent}        // 组件已通过序列化字段直接绑定，无需运行时查找");
            
            // 为每个绑定生成验证代码
            foreach (var binding in bindings)
            {
                if (binding.IsValid())
                {
                    sb.AppendLine($"{indent}        // 验证单个组件: {binding.ComponentName}");
                sb.AppendLine($"{indent}        if ({binding.FieldName} == null)");
                sb.AppendLine($"{indent}            Debug.LogWarning($\"组件 {binding.ComponentName} 未正确绑定\");");
                }
            }
            
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 重写OnInit方法
            sb.AppendLine($"{indent}    protected override void OnInit(object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.OnInit(userData);");
            sb.AppendLine($"{indent}        BindComponents();");
            sb.AppendLine($"{indent}        InitializeEvents();");
            sb.AppendLine($"{indent}        OnInitCustom(userData);");
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 生成事件初始化方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 初始化事件绑定（自动生成）");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    private void InitializeEvents()");
            sb.AppendLine($"{indent}    {{");
            
            // 为Button组件生成事件绑定
            foreach (var binding in bindings)
            {
                if (binding.IsValid() && binding.ComponentType == "Button")
                {
                    string methodName = char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1);
                    sb.AppendLine($"{indent}        // 绑定按钮事件: {binding.ComponentName}");
                sb.AppendLine($"{indent}        {binding.ComponentName}.onClick.AddListener(On{methodName}Click);");
                }
            }
            
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 自定义初始化方法（分部方法）
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 自定义初始化逻辑（在业务逻辑类中实现）");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    partial void OnInitCustom(object userData);");
            
            sb.AppendLine($"{indent}}}");
            
            // 关闭命名空间
            if (!string.IsNullOrEmpty(namespaceName))
            {
                sb.AppendLine("}");
            }
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 生成业务逻辑类
        /// </summary>
        public static string GenerateLogicClass(string className, string namespaceName, List<UIComponentBinding> bindings)
        {
            var sb = new StringBuilder();
            
            // 文件头注释
            sb.AppendLine("// 业务逻辑类 - 可编辑");
            sb.AppendLine("// 此文件用于实现UI的业务逻辑，可以自由编辑");
            sb.AppendLine();
            
            // 命名空间和引用
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEngine.UI;");
            sb.AppendLine("using UGF.GameFramework.UI;");
            
            // 检查是否需要TMPro命名空间
            bool needsTMPro = bindings.Any(b => b.IsValid() && 
                (b.ComponentType.Contains("TextMeshPro") || b.ComponentType.Contains("TMP")));
            if (needsTMPro)
            {
                sb.AppendLine("using TMPro;");
            }
            sb.AppendLine();
            
            // 命名空间声明
            if (!string.IsNullOrEmpty(namespaceName))
            {
                sb.AppendLine($"namespace {namespaceName}");
                sb.AppendLine("{");
            }
            
            // 类定义
            string indent = !string.IsNullOrEmpty(namespaceName) ? "    " : "";
            sb.AppendLine($"{indent}public partial class {className}");
            sb.AppendLine($"{indent}{{");
            
            // 实现自定义初始化方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 自定义初始化逻辑");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    partial void OnInitCustom(object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        // 在这里添加自定义初始化逻辑");
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 生成按钮事件处理方法
            foreach (var binding in bindings)
            {
                if (binding.IsValid() && binding.ComponentType == "Button")
                {
                    string methodName = char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1);
                    sb.AppendLine($"{indent}    /// <summary>");
                    sb.AppendLine($"{indent}    /// {binding.ComponentName} 按钮点击事件");
                    sb.AppendLine($"{indent}    /// </summary>");
                    sb.AppendLine($"{indent}    private void On{methodName}Click()");
                    sb.AppendLine($"{indent}    {{");
                    sb.AppendLine($"{indent}        Debug.Log(\"点击了 {{binding.ComponentName}}\");");
                sb.AppendLine($"{indent}        // TODO: 实现 {{binding.ComponentName}} 按钮点击逻辑");
                    sb.AppendLine($"{indent}    }}");
                    sb.AppendLine();
                }
            }
            
            // 生成生命周期方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 界面打开时调用");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    protected override void OnOpen(object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.OnOpen(userData);");
            sb.AppendLine($"{indent}        // TODO: 实现界面打开逻辑");
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 界面关闭时调用");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    protected override void OnClose(bool isShutdown, object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.OnClose(isShutdown, userData);");
            sb.AppendLine($"{indent}        // TODO: 实现界面关闭逻辑");
            sb.AppendLine($"{indent}    }}");
            
            sb.AppendLine($"{indent}}}");
            
            // 关闭命名空间
            if (!string.IsNullOrEmpty(namespaceName))
            {
                sb.AppendLine("}");
            }
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 生成代码
        /// </summary>
        public static void GenerateCode(UIDesigner designer)
        {
            if (designer == null || string.IsNullOrEmpty(designer.UIFormName))
            {
                Debug.LogError("UIDesigner或类名为空，无法生成代码");
                return;
            }
            
            // 获取输出目录
            string outputDirectory = GetOutputDirectory(designer);
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }
            
            // 生成绑定类
            string bindingCode = GenerateBindingClass(designer.UIFormName, designer.NamespaceName, designer.ComponentBindings);
            string bindingFilePath = Path.Combine(outputDirectory, $"{designer.UIFormName}.Generated.cs");
            File.WriteAllText(bindingFilePath, bindingCode);
            
            // 生成或更新业务逻辑类
            string logicFilePath = Path.Combine(outputDirectory, $"{designer.UIFormName}.cs");
            if (!File.Exists(logicFilePath))
            {
                // 文件不存在时创建新文件
                string logicCode = GenerateLogicClass(designer.UIFormName, designer.NamespaceName, designer.ComponentBindings);
                File.WriteAllText(logicFilePath, logicCode);
            }
            else
            {
                // 文件存在时更新事件绑定
                UpdateLogicClassEvents(logicFilePath, designer.ComponentBindings);
            }
            
            // 刷新资源数据库
            AssetDatabase.Refresh();
            
            // 保存UIDesigner的关键信息，避免延迟调用时组件被销毁
            string designerName = designer.UIFormName;
            string designerNamespace = designer.NamespaceName;
            GameObject designerGameObject = designer.gameObject;
            
            // 根据编译状态决定Prefab生成时机
            if (EditorApplication.isCompiling)
            {
                Debug.Log("检测到编译中，将在编译完成后生成Prefab");
                // 监听编译完成事件来生成UI Prefab
                System.Action<object> onCompilationFinished = null;
                onCompilationFinished = (context) => {
                    // 编译完成后生成Prefab
                    EditorApplication.delayCall += () => {
                        // 重新获取UIDesigner组件，确保组件仍然有效
                        UIDesigner currentDesigner = designerGameObject != null ? designerGameObject.GetComponent<UIDesigner>() : null;
                        if (currentDesigner != null)
                        {
                            Debug.Log($"[GenerateCode] 编译完成后重新获取到UIDesigner：{currentDesigner.name}");
                            CreateUIPrefab(currentDesigner);
                        }
                        else
                        {
                            Debug.LogWarning($"[GenerateCode] 编译完成后无法找到UIDesigner组件，GameObject: {(designerGameObject != null ? designerGameObject.name : "null")}");
                        }
                    };
                    // 移除事件监听，避免重复调用
                    CompilationPipeline.compilationFinished -= onCompilationFinished;
                };
                CompilationPipeline.compilationFinished += onCompilationFinished;
            }
            else
            {
                Debug.Log("当前无编译任务，延迟生成Prefab");
                // 如果当前没有编译任务，延迟一段时间生成以确保类型可用
                EditorApplication.delayCall += () => {
                    EditorApplication.delayCall += () => {
                        // 重新获取UIDesigner组件，确保组件仍然有效
                        UIDesigner currentDesigner = designerGameObject != null ? designerGameObject.GetComponent<UIDesigner>() : null;
                        if (currentDesigner != null)
                        {
                            Debug.Log($"[GenerateCode] 延迟调用时重新获取到UIDesigner：{currentDesigner.name}");
                            CreateUIPrefab(currentDesigner);
                        }
                        else
                        {
                            Debug.LogWarning($"[GenerateCode] 延迟调用时无法找到UIDesigner组件，GameObject: {(designerGameObject != null ? designerGameObject.name : "null")}");
                        }
                    };
                };
            }
            
            Debug.Log($"代码生成完成：\n绑定类: {bindingFilePath}\n业务逻辑类: {logicFilePath}\nPrefab将在编译完成后生成");
        }
        
        /// <summary>
        /// 仅生成代码，不创建Prefab
        /// </summary>
        public static void GenerateCodeOnly(UIDesigner designer)
        {
            if (designer == null || string.IsNullOrEmpty(designer.UIFormName))
            {
                Debug.LogError("UIDesigner或类名为空，无法生成代码");
                return;
            }
            
            // 获取输出目录
            string outputDirectory = GetOutputDirectory(designer);
            if (!Directory.Exists(outputDirectory))
            {
                Directory.CreateDirectory(outputDirectory);
            }
            
            // 生成绑定类
            string bindingCode = GenerateBindingClass(designer.UIFormName, designer.NamespaceName, designer.ComponentBindings);
            string bindingFilePath = Path.Combine(outputDirectory, $"{designer.UIFormName}.Generated.cs");
            File.WriteAllText(bindingFilePath, bindingCode);
            
            // 生成或更新业务逻辑类
            string logicFilePath = Path.Combine(outputDirectory, $"{designer.UIFormName}.cs");
            if (!File.Exists(logicFilePath))
            {
                // 文件不存在时创建新文件
                string logicCode = GenerateLogicClass(designer.UIFormName, designer.NamespaceName, designer.ComponentBindings);
                File.WriteAllText(logicFilePath, logicCode);
            }
            else
            {
                // 文件存在时更新事件绑定
                UpdateLogicClassEvents(logicFilePath, designer.ComponentBindings);
            }
            
            // 刷新资源数据库
            AssetDatabase.Refresh();
            
            Debug.Log($"代码生成完成：\n绑定类: {bindingFilePath}\n业务逻辑类: {logicFilePath}");
        }
        
        /// <summary>
        /// 仅创建UI Prefab，不生成代码
        /// </summary>
        public static void CreateUIPrefabOnly(UIDesigner designer)
        {
            Debug.Log("[CreateUIPrefabOnly] 开始执行");
            
            if (designer == null)
            {
                Debug.LogError("[CreateUIPrefabOnly] UIDesigner为null，无法创建Prefab。可能原因：1) 延迟调用时UIDesigner组件已被销毁 2) 传入的参数为null");
                return;
            }
            
            // 检查UIDesigner组件是否仍然有效
            if (!designer || designer.gameObject == null)
            {
                Debug.LogError("[CreateUIPrefabOnly] UIDesigner组件已被销毁或GameObject为null，无法创建Prefab");
                return;
            }
            
            // 立即保存UIDesigner的关键信息，防止在CreateUIPrefab执行过程中组件被销毁
            string uiFormName = designer.UIFormName;
            string namespaceName = designer.NamespaceName;
            GameObject gameObject = designer.gameObject;
            var componentBindings = new List<UIComponentBinding>(designer.ComponentBindings);
            
            Debug.Log($"[CreateUIPrefabOnly] UIDesigner有效，开始创建Prefab：{designer.name}，UIFormName: {uiFormName}");
            
            // 创建一个临时的UIDesigner数据结构来传递信息
            CreateUIPrefabWithData(gameObject, uiFormName, namespaceName, componentBindings);
        }
        
        /// <summary>
        /// 更新业务逻辑类的事件处理方法
        /// </summary>
        private static void UpdateLogicClassEvents(string filePath, List<UIComponentBinding> bindings)
        {
            if (!File.Exists(filePath))
                return;

            string content = File.ReadAllText(filePath);
            var buttonBindings = bindings.Where(b => b.IsValid() && b.ComponentType == "Button").ToList();
            
            // 添加缺失的事件处理方法
            content = AddMissingEventHandlers(content, buttonBindings);
            
            File.WriteAllText(filePath, content);
        }
        

        
        /// <summary>
        /// 添加缺失的事件处理方法
        /// </summary>
        private static string AddMissingEventHandlers(string content, List<UIComponentBinding> buttonBindings)
        {
            var sb = new StringBuilder(content);
            
            foreach (var binding in buttonBindings)
            {
                string methodName = $"On{char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1)}Click";
                if (!content.Contains(methodName))
                {
                    // 在最后一个方法之前插入新的事件处理方法
                    int insertPos = FindLastMethodEnd(content);
                    if (insertPos != -1)
                    {
                        string newMethod = $"\n    /// <summary>\n    /// {binding.ComponentName} 按钮点击事件\n    /// </summary>\n    private void {methodName}()\n    {{\n        Debug.Log(\"点击了 {{binding.ComponentName}}\");\n        // TODO: 实现 {{binding.ComponentName}} 按钮点击逻辑\n    }}\n";
                        sb.Insert(insertPos, newMethod);
                    }
                }
            }
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 查找匹配的大括号
        /// </summary>
        private static int FindMatchingBrace(string content, int startPos)
        {
            int braceCount = 1;
            for (int i = startPos + 1; i < content.Length; i++)
            {
                if (content[i] == '{')
                    braceCount++;
                else if (content[i] == '}')
                {
                    braceCount--;
                    if (braceCount == 0)
                        return i;
                }
            }
            return -1;
        }
        
        /// <summary>
        /// 查找最后一个方法的结束位置
        /// </summary>
        private static int FindLastMethodEnd(string content)
        {
            // 查找类的结束大括号之前的位置
            int lastBrace = content.LastIndexOf('}');
            if (lastBrace != -1)
            {
                // 向前查找，跳过空白字符
                for (int i = lastBrace - 1; i >= 0; i--)
                {
                    if (!char.IsWhiteSpace(content[i]))
                    {
                        return i + 1;
                    }
                }
            }
            return -1;
        }
        
        /// <summary>
        /// 使用保存的数据创建UI Prefab
        /// </summary>
        private static void CreateUIPrefabWithData(GameObject sourceGameObject, string uiFormName, string namespaceName, List<UIComponentBinding> componentBindings)
        {
            GameObject rootObject = null;
            try
            {
                Debug.Log($"[CreateUIPrefabWithData] 开始创建UI Prefab: {uiFormName}");
                
                if (sourceGameObject == null)
                {
                    Debug.LogError("[CreateUIPrefabWithData] 源GameObject为null，无法创建Prefab");
                    return;
                }
                
                // 创建临时UIDesigner数据
                var tempDesignerData = new UIDesignerData
                {
                    uiFormName = uiFormName,
                    namespaceName = namespaceName,
                    componentBindings = componentBindings,
                    gameObject = sourceGameObject
                };
                
                Debug.Log($"开始创建UI Prefab：{tempDesignerData.uiFormName}");
                
                // 获取Prefab输出路径
                string prefabOutputPath = GetPrefabOutputPath(tempDesignerData);
                Debug.Log($"Prefab输出路径：{prefabOutputPath}");
                
                // 复制源GameObject作为Prefab根节点
                rootObject = UnityEngine.Object.Instantiate(sourceGameObject);
                if (rootObject == null)
                {
                    Debug.LogError("复制GameObject失败，rootObject为null");
                    return;
                }
                rootObject.name = tempDesignerData.uiFormName;
                Debug.Log($"已复制GameObject作为Prefab根节点：{rootObject.name}");
                
                // 移除UIDesigner和UIComponentBinder组件
                Debug.Log("开始移除设计器组件");
                RemoveDesignerComponents(rootObject);
                
                // 添加生成的UI脚本组件
                Debug.Log("开始添加UI脚本组件");
                AddUIFormScript(rootObject, tempDesignerData);
                
                // 绑定组件引用到脚本
                Debug.Log("开始绑定组件引用");
                BindComponentReferences(rootObject, tempDesignerData);
                
                // 保存为Prefab
                Debug.Log("开始保存Prefab");
                SaveAsPrefab(rootObject, prefabOutputPath);
                
                // 清理临时对象
                UnityEngine.Object.DestroyImmediate(rootObject);
                rootObject = null;
                
                Debug.Log($"UI Prefab创建完成: {prefabOutputPath}");
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"创建UI Prefab失败: {ex.Message}\n堆栈跟踪：{ex.StackTrace}");
                
                // 确保清理临时对象
                if (rootObject != null)
                {
                    try
                    {
                        UnityEngine.Object.DestroyImmediate(rootObject);
                    }
                    catch (System.Exception cleanupEx)
                    {
                        Debug.LogError($"清理临时对象失败：{cleanupEx.Message}");
                    }
                }
            }
        }
        
        /// <summary>
        /// 创建UI Prefab（兼容旧接口）
        /// </summary>
        private static void CreateUIPrefab(UIDesigner designer)
        {
            GameObject rootObject = null;
            try
            {
                Debug.Log("[CreateUIPrefab] 开始创建UI Prefab");
                
                if (designer == null)
                {
                    Debug.LogError("[CreateUIPrefab] UIDesigner为null，无法创建Prefab。可能原因：1) 延迟调用时UIDesigner组件已被销毁 2) 传入的参数为null");
                    return;
                }
                
                Debug.Log($"[CreateUIPrefab] UIDesigner实例有效：{designer.name}");
                
                if (designer.gameObject == null)
                {
                    Debug.LogError("[CreateUIPrefab] UIDesigner的gameObject为null，无法创建Prefab");
                    return;
                }
                
                // 检查UIDesigner组件是否仍然存在
                if (designer == null || !designer)
                {
                    Debug.LogError("[CreateUIPrefab] UIDesigner组件已被销毁，无法创建Prefab");
                    return;
                }
                
                Debug.Log($"开始创建UI Prefab：{designer.UIFormName}");
                
                // 获取Prefab输出路径
                string prefabOutputPath = GetPrefabOutputPath(designer);
                Debug.Log($"Prefab输出路径：{prefabOutputPath}");
                
                // 复制UIDesigner当前GameObject作为Prefab根节点
                rootObject = UnityEngine.Object.Instantiate(designer.gameObject);
                if (rootObject == null)
                {
                    Debug.LogError("复制GameObject失败，rootObject为null");
                    return;
                }
                rootObject.name = designer.UIFormName;
                Debug.Log($"已复制GameObject作为Prefab根节点：{rootObject.name}");
                
                // 移除UIDesigner和UIComponentBinder组件
                Debug.Log("开始移除设计器组件");
                RemoveDesignerComponents(rootObject);
                
                // 添加生成的UI脚本组件
                Debug.Log("开始添加UI脚本组件");
                AddUIFormScript(rootObject, designer);
                
                // 绑定组件引用到脚本
                Debug.Log("开始绑定组件引用");
                BindComponentReferences(rootObject, designer);
                
                // 保存为Prefab
                Debug.Log("开始保存Prefab");
                SaveAsPrefab(rootObject, prefabOutputPath);
                
                // 清理临时对象
                UnityEngine.Object.DestroyImmediate(rootObject);
                rootObject = null;
                
                Debug.Log($"UI Prefab创建完成: {prefabOutputPath}");
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"创建UI Prefab失败: {ex.Message}\n堆栈跟踪：{ex.StackTrace}");
                
                // 确保清理临时对象
                if (rootObject != null)
                {
                    try
                    {
                        UnityEngine.Object.DestroyImmediate(rootObject);
                    }
                    catch (System.Exception cleanupEx)
                    {
                        Debug.LogError($"清理临时对象失败：{cleanupEx.Message}");
                    }
                }
            }
        }
        
        /// <summary>
        /// 移除设计器相关组件
        /// </summary>
        private static void RemoveDesignerComponents(GameObject rootObject)
        {
            try
            {
                // 移除UIDesigner组件
                UIDesigner designer = rootObject.GetComponent<UIDesigner>();
                if (designer != null)
                {
                    UnityEngine.Object.DestroyImmediate(designer);
                    Debug.Log($"已移除UIDesigner组件从 {rootObject.name}");
                }
                
                // 移除UIComponentBinder组件（如果存在）
                System.Type binderType = System.Type.GetType("UGF.GameFramework.UI.UIComponentBinder");
                if (binderType != null)
                {
                    var binder = rootObject.GetComponent(binderType);
                    if (binder != null)
                    {
                        UnityEngine.Object.DestroyImmediate(binder);
                        Debug.Log($"已移除UIComponentBinder组件从 {rootObject.name}");
                    }
                }
                else
                {
                    // 尝试通过泛型方式移除UIComponentBinder
                    var binder = rootObject.GetComponent<UIComponentBinder>();
                    if (binder != null)
                    {
                        UnityEngine.Object.DestroyImmediate(binder);
                        Debug.Log($"已移除UIComponentBinder组件从 {rootObject.name}");
                    }
                }
                
                // 递归移除子对象中的设计器组件
                foreach (Transform child in rootObject.transform)
                {
                    RemoveDesignerComponents(child.gameObject);
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"移除设计器组件时发生错误：{ex.Message}\n堆栈跟踪：{ex.StackTrace}");
            }
        }
        
        /// <summary>
        /// 获取Prefab输出路径
        /// </summary>
        private static string GetPrefabOutputPath(UIDesigner designer)
        {
            // 获取脚本输出目录的父目录作为Prefab目录
            string scriptDirectory = GetOutputDirectory(designer);
            string assetsRelativePath = scriptDirectory.Replace(Application.dataPath, "Assets");
            string prefabDirectory = Path.GetDirectoryName(assetsRelativePath);
            
            // 确保Prefab目录存在
            string fullPrefabDirectory = Path.Combine(Application.dataPath.Replace("Assets", ""), prefabDirectory);
            if (!Directory.Exists(fullPrefabDirectory))
            {
                Directory.CreateDirectory(fullPrefabDirectory);
            }
            
            return Path.Combine(prefabDirectory, $"{designer.UIFormName}.prefab").Replace("\\", "/");
        }
        
        /// <summary>
        /// 获取Prefab输出路径（UIDesignerData版本）
        /// </summary>
        private static string GetPrefabOutputPath(UIDesignerData designerData)
        {
            // 获取脚本输出目录的父目录作为Prefab目录
            string scriptDirectory = GetOutputDirectory(designerData);
            string assetsRelativePath = scriptDirectory.Replace(Application.dataPath, "Assets");
            string prefabDirectory = Path.GetDirectoryName(assetsRelativePath);
            
            // 确保Prefab目录存在
            string fullPrefabDirectory = Path.Combine(Application.dataPath.Replace("Assets", ""), prefabDirectory);
            if (!Directory.Exists(fullPrefabDirectory))
            {
                Directory.CreateDirectory(fullPrefabDirectory);
            }
            
            return Path.Combine(prefabDirectory, $"{designerData.uiFormName}.prefab").Replace("\\", "/");
        }
        
        /// <summary>
        /// 创建Canvas根节点
        /// </summary>
        private static GameObject CreateCanvasRoot(string uiFormName)
        {
            // 创建Canvas
            GameObject canvasRoot = new GameObject(uiFormName);
            Canvas canvas = canvasRoot.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvas.sortingOrder = 0;
            
            // 添加CanvasScaler
            CanvasScaler canvasScaler = canvasRoot.AddComponent<CanvasScaler>();
            canvasScaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            canvasScaler.referenceResolution = new Vector2(1920, 1080);
            canvasScaler.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
            canvasScaler.matchWidthOrHeight = 0.5f;
            
            // 添加GraphicRaycaster
            canvasRoot.AddComponent<GraphicRaycaster>();
            
            return canvasRoot;
        }
        
        /// <summary>
        /// 根据组件绑定信息创建UI组件
        /// </summary>
        private static void CreateUIComponents(GameObject parent, List<UIComponentBinding> bindings)
        {
            foreach (var binding in bindings)
            {
                if (!binding.IsValid()) continue;
                
                CreateUIComponent(parent, binding);
            }
        }
        
        /// <summary>
        /// 创建单个UI组件
        /// </summary>
        private static GameObject CreateUIComponent(GameObject parent, UIComponentBinding binding)
        {
            GameObject componentObj = new GameObject(binding.ComponentName);
            componentObj.transform.SetParent(parent.transform, false);
            
            // 添加RectTransform
            RectTransform rectTransform = componentObj.AddComponent<RectTransform>();
            
            // 根据组件类型添加相应的组件
            switch (binding.ComponentType)
            {
                case "Button":
                    CreateButton(componentObj, binding);
                    break;
                case "Text":
                    CreateText(componentObj, binding);
                    break;
                case "Image":
                    CreateImage(componentObj, binding);
                    break;
                case "InputField":
                    CreateInputField(componentObj, binding);
                    break;
                case "Toggle":
                    CreateToggle(componentObj, binding);
                    break;
                case "Slider":
                    CreateSlider(componentObj, binding);
                    break;
                case "Dropdown":
                    CreateDropdown(componentObj, binding);
                    break;
                default:
                    Debug.LogWarning($"不支持的组件类型: {binding.ComponentType}");
                    break;
            }
            
            // 设置默认布局
            SetDefaultLayout(rectTransform, binding.ComponentType);
            
            return componentObj;
        }
        
        /// <summary>
        /// 获取输出目录
        /// </summary>
        private static string GetOutputDirectory(UIDesigner designer)
        {
            // 统一使用默认路径，避免因预制体状态变化导致路径不一致
            return Path.Combine(Application.dataPath, "Scripts", "UI", "Generated");
        }
        
        /// <summary>
        /// 获取输出目录（UIDesignerData版本）
        /// </summary>
        private static string GetOutputDirectory(UIDesignerData designerData)
        {
            // 统一使用默认路径，避免因预制体状态变化导致路径不一致
            return Path.Combine(Application.dataPath, "Scripts", "UI", "Generated");
        }
        
        /// <summary>
        /// 创建Button组件
        /// </summary>
        private static void CreateButton(GameObject obj, UIComponentBinding binding)
        {
            // 添加Image组件作为背景
            Image image = obj.AddComponent<Image>();
            image.color = new Color(1f, 1f, 1f, 1f);
            
            // 添加Button组件
            Button button = obj.AddComponent<Button>();
            button.targetGraphic = image;
            
            // 创建Text子对象
            GameObject textObj = new GameObject("Text");
            textObj.transform.SetParent(obj.transform, false);
            textObj.AddComponent<RectTransform>();
            
            Text text = textObj.AddComponent<Text>();
            text.text = binding.ComponentName;
            text.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            text.fontSize = 14;
            text.color = Color.black;
            text.alignment = TextAnchor.MiddleCenter;
            
            // 设置Text的RectTransform
            RectTransform textRect = textObj.GetComponent<RectTransform>();
            textRect.anchorMin = Vector2.zero;
            textRect.anchorMax = Vector2.one;
            textRect.sizeDelta = Vector2.zero;
            textRect.anchoredPosition = Vector2.zero;
        }
        
        /// <summary>
        /// 创建Text组件
        /// </summary>
        private static void CreateText(GameObject obj, UIComponentBinding binding)
        {
            Text text = obj.AddComponent<Text>();
            text.text = binding.ComponentName;
            text.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            text.fontSize = 14;
            text.color = Color.black;
            text.alignment = TextAnchor.MiddleLeft;
        }
        
        /// <summary>
        /// 创建Image组件
        /// </summary>
        private static void CreateImage(GameObject obj, UIComponentBinding binding)
        {
            Image image = obj.AddComponent<Image>();
            image.color = Color.white;
        }
        
        /// <summary>
        /// 创建InputField组件
        /// </summary>
        private static void CreateInputField(GameObject obj, UIComponentBinding binding)
        {
            // 添加Image作为背景
            Image background = obj.AddComponent<Image>();
            background.color = Color.white;
            
            // 添加InputField组件
            InputField inputField = obj.AddComponent<InputField>();
            inputField.targetGraphic = background;
            
            // 创建Text子对象作为占位符
            GameObject placeholderObj = new GameObject("Placeholder");
            placeholderObj.transform.SetParent(obj.transform, false);
            placeholderObj.AddComponent<RectTransform>();
            Text placeholder = placeholderObj.AddComponent<Text>();
            placeholder.text = "Enter text...";
            placeholder.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            placeholder.fontSize = 14;
            placeholder.color = new Color(0.5f, 0.5f, 0.5f, 1f);
            placeholder.alignment = TextAnchor.MiddleLeft;
            
            // 创建Text子对象作为输入文本
            GameObject textObj = new GameObject("Text");
            textObj.transform.SetParent(obj.transform, false);
            textObj.AddComponent<RectTransform>();
            Text text = textObj.AddComponent<Text>();
            text.text = "";
            text.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            text.fontSize = 14;
            text.color = Color.black;
            text.alignment = TextAnchor.MiddleLeft;
            text.supportRichText = false;
            
            // 设置InputField的引用
            inputField.placeholder = placeholder;
            inputField.textComponent = text;
            
            // 设置子对象的RectTransform
            SetTextRectTransform(placeholderObj.GetComponent<RectTransform>());
            SetTextRectTransform(textObj.GetComponent<RectTransform>());
        }
        
        /// <summary>
        /// 创建Toggle组件
        /// </summary>
        private static void CreateToggle(GameObject obj, UIComponentBinding binding)
        {
            // 添加Toggle组件
            Toggle toggle = obj.AddComponent<Toggle>();
            
            // 创建Background子对象
            GameObject backgroundObj = new GameObject("Background");
            backgroundObj.transform.SetParent(obj.transform, false);
            backgroundObj.AddComponent<RectTransform>();
            Image background = backgroundObj.AddComponent<Image>();
            background.color = Color.white;
            
            // 创建Checkmark子对象
            GameObject checkmarkObj = new GameObject("Checkmark");
            checkmarkObj.transform.SetParent(backgroundObj.transform, false);
            checkmarkObj.AddComponent<RectTransform>();
            Image checkmark = checkmarkObj.AddComponent<Image>();
            checkmark.color = new Color(0.2f, 0.8f, 0.2f, 1f);
            
            // 创建Label子对象
            GameObject labelObj = new GameObject("Label");
            labelObj.transform.SetParent(obj.transform, false);
            labelObj.AddComponent<RectTransform>();
            Text label = labelObj.AddComponent<Text>();
            label.text = binding.ComponentName;
            label.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            label.fontSize = 14;
            label.color = Color.black;
            label.alignment = TextAnchor.MiddleLeft;
            
            // 设置Toggle的引用
            toggle.targetGraphic = background;
            toggle.graphic = checkmark;
            
            // 设置布局
            SetToggleLayout(obj, backgroundObj, checkmarkObj, labelObj);
        }
        
        /// <summary>
        /// 创建Slider组件
        /// </summary>
        private static void CreateSlider(GameObject obj, UIComponentBinding binding)
        {
            // 添加Slider组件
            Slider slider = obj.AddComponent<Slider>();
            
            // 创建Background
            GameObject backgroundObj = new GameObject("Background");
            backgroundObj.transform.SetParent(obj.transform, false);
            backgroundObj.AddComponent<RectTransform>();
            Image background = backgroundObj.AddComponent<Image>();
            background.color = new Color(0.8f, 0.8f, 0.8f, 1f);
            
            // 创建Fill Area
            GameObject fillAreaObj = new GameObject("Fill Area");
            fillAreaObj.transform.SetParent(obj.transform, false);
            fillAreaObj.AddComponent<RectTransform>();
            
            // 创建Fill
            GameObject fillObj = new GameObject("Fill");
            fillObj.transform.SetParent(fillAreaObj.transform, false);
            fillObj.AddComponent<RectTransform>();
            Image fill = fillObj.AddComponent<Image>();
            fill.color = new Color(0.2f, 0.6f, 1f, 1f);
            
            // 创建Handle Slide Area
            GameObject handleSlideAreaObj = new GameObject("Handle Slide Area");
            handleSlideAreaObj.transform.SetParent(obj.transform, false);
            handleSlideAreaObj.AddComponent<RectTransform>();
            
            // 创建Handle
            GameObject handleObj = new GameObject("Handle");
            handleObj.transform.SetParent(handleSlideAreaObj.transform, false);
            handleObj.AddComponent<RectTransform>();
            Image handle = handleObj.AddComponent<Image>();
            handle.color = Color.white;
            
            // 设置Slider的引用
            slider.fillRect = fillObj.GetComponent<RectTransform>();
            slider.handleRect = handleObj.GetComponent<RectTransform>();
            slider.targetGraphic = handle;
            
            // 设置布局
            SetSliderLayout(obj, backgroundObj, fillAreaObj, fillObj, handleSlideAreaObj, handleObj);
        }
        
        /// <summary>
        /// 创建Dropdown组件
        /// </summary>
        private static void CreateDropdown(GameObject obj, UIComponentBinding binding)
        {
            // 添加Image作为背景
            Image background = obj.AddComponent<Image>();
            background.color = Color.white;
            
            // 添加Dropdown组件
            Dropdown dropdown = obj.AddComponent<Dropdown>();
            dropdown.targetGraphic = background;
            
            // 创建Label
            GameObject labelObj = new GameObject("Label");
            labelObj.transform.SetParent(obj.transform, false);
            labelObj.AddComponent<RectTransform>();
            Text label = labelObj.AddComponent<Text>();
            label.text = "Option A";
            label.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
            label.fontSize = 14;
            label.color = Color.black;
            label.alignment = TextAnchor.MiddleLeft;
            
            // 创建Arrow
            GameObject arrowObj = new GameObject("Arrow");
            arrowObj.transform.SetParent(obj.transform, false);
            arrowObj.AddComponent<RectTransform>();
            Image arrow = arrowObj.AddComponent<Image>();
            arrow.color = Color.black;
            
            // 设置Dropdown的引用
            dropdown.captionText = label;
            
            // 设置布局
            SetDropdownLayout(obj, labelObj, arrowObj);
            
            // 添加默认选项
            dropdown.options.Add(new Dropdown.OptionData("Option A"));
            dropdown.options.Add(new Dropdown.OptionData("Option B"));
            dropdown.options.Add(new Dropdown.OptionData("Option C"));
        }
        
        /// <summary>
        /// 设置默认布局
        /// </summary>
        private static void SetDefaultLayout(RectTransform rectTransform, string componentType)
        {
            switch (componentType)
            {
                case "Button":
                    rectTransform.sizeDelta = new Vector2(160, 30);
                    break;
                case "Text":
                    rectTransform.sizeDelta = new Vector2(160, 30);
                    break;
                case "Image":
                    rectTransform.sizeDelta = new Vector2(100, 100);
                    break;
                case "InputField":
                    rectTransform.sizeDelta = new Vector2(160, 30);
                    break;
                case "Toggle":
                    rectTransform.sizeDelta = new Vector2(160, 20);
                    break;
                case "Slider":
                    rectTransform.sizeDelta = new Vector2(160, 20);
                    break;
                case "Dropdown":
                    rectTransform.sizeDelta = new Vector2(160, 30);
                    break;
            }
            
            // 设置锚点为中心
            rectTransform.anchorMin = new Vector2(0.5f, 0.5f);
            rectTransform.anchorMax = new Vector2(0.5f, 0.5f);
            rectTransform.anchoredPosition = Vector2.zero;
        }
        
        /// <summary>
        /// 设置Text的RectTransform
        /// </summary>
        private static void SetTextRectTransform(RectTransform rectTransform)
        {
            rectTransform.anchorMin = Vector2.zero;
            rectTransform.anchorMax = Vector2.one;
            rectTransform.sizeDelta = Vector2.zero;
            rectTransform.anchoredPosition = Vector2.zero;
            rectTransform.offsetMin = new Vector2(10, 6);
            rectTransform.offsetMax = new Vector2(-10, -7);
        }
        
        /// <summary>
        /// 设置Toggle布局
        /// </summary>
        private static void SetToggleLayout(GameObject toggle, GameObject background, GameObject checkmark, GameObject label)
        {
            RectTransform toggleRect = toggle.GetComponent<RectTransform>();
            RectTransform backgroundRect = background.GetComponent<RectTransform>();
            RectTransform checkmarkRect = checkmark.GetComponent<RectTransform>();
            RectTransform labelRect = label.GetComponent<RectTransform>();
            
            // Background
            backgroundRect.anchorMin = new Vector2(0, 1);
            backgroundRect.anchorMax = new Vector2(0, 1);
            backgroundRect.anchoredPosition = new Vector2(10, -10);
            backgroundRect.sizeDelta = new Vector2(20, 20);
            
            // Checkmark
            checkmarkRect.anchorMin = Vector2.zero;
            checkmarkRect.anchorMax = Vector2.one;
            checkmarkRect.sizeDelta = Vector2.zero;
            checkmarkRect.anchoredPosition = Vector2.zero;
            
            // Label
            labelRect.anchorMin = new Vector2(0, 0);
            labelRect.anchorMax = new Vector2(1, 1);
            labelRect.offsetMin = new Vector2(23, 1);
            labelRect.offsetMax = new Vector2(-5, -2);
        }
        
        /// <summary>
        /// 设置Slider布局
        /// </summary>
        private static void SetSliderLayout(GameObject slider, GameObject background, GameObject fillArea, GameObject fill, GameObject handleSlideArea, GameObject handle)
        {
            RectTransform backgroundRect = background.GetComponent<RectTransform>();
            RectTransform fillAreaRect = fillArea.GetComponent<RectTransform>();
            RectTransform fillRect = fill.GetComponent<RectTransform>();
            RectTransform handleSlideAreaRect = handleSlideArea.GetComponent<RectTransform>();
            RectTransform handleRect = handle.GetComponent<RectTransform>();
            
            // Background
            backgroundRect.anchorMin = new Vector2(0, 0.25f);
            backgroundRect.anchorMax = new Vector2(1, 0.75f);
            backgroundRect.sizeDelta = new Vector2(0, 0);
            backgroundRect.anchoredPosition = Vector2.zero;
            
            // Fill Area
            fillAreaRect.anchorMin = new Vector2(0, 0.25f);
            fillAreaRect.anchorMax = new Vector2(1, 0.75f);
            fillAreaRect.sizeDelta = new Vector2(-20, 0);
            fillAreaRect.anchoredPosition = Vector2.zero;
            
            // Fill
            fillRect.anchorMin = Vector2.zero;
            fillRect.anchorMax = Vector2.one;
            fillRect.sizeDelta = new Vector2(10, 0);
            fillRect.anchoredPosition = Vector2.zero;
            
            // Handle Slide Area
            handleSlideAreaRect.anchorMin = Vector2.zero;
            handleSlideAreaRect.anchorMax = Vector2.one;
            handleSlideAreaRect.sizeDelta = new Vector2(-20, 0);
            handleSlideAreaRect.anchoredPosition = Vector2.zero;
            
            // Handle
            handleRect.anchorMin = new Vector2(0, 0);
            handleRect.anchorMax = new Vector2(0, 1);
            handleRect.sizeDelta = new Vector2(20, 0);
            handleRect.anchoredPosition = Vector2.zero;
        }
        
        /// <summary>
        /// 设置Dropdown布局
        /// </summary>
        private static void SetDropdownLayout(GameObject dropdown, GameObject label, GameObject arrow)
        {
            RectTransform labelRect = label.GetComponent<RectTransform>();
            RectTransform arrowRect = arrow.GetComponent<RectTransform>();
            
            // Label
            labelRect.anchorMin = Vector2.zero;
            labelRect.anchorMax = Vector2.one;
            labelRect.offsetMin = new Vector2(10, 6);
            labelRect.offsetMax = new Vector2(-25, -7);
            
            // Arrow
            arrowRect.anchorMin = new Vector2(1, 0.5f);
            arrowRect.anchorMax = new Vector2(1, 0.5f);
            arrowRect.sizeDelta = new Vector2(20, 20);
            arrowRect.anchoredPosition = new Vector2(-15, 0);
        }
        
        /// <summary>
        /// 添加UI脚本组件
        /// </summary>
        private static void AddUIFormScript(GameObject rootObject, UIDesigner designer)
        {
            // 尝试通过反射添加生成的UI脚本组件
            try
            {
                // 查找生成的脚本类型
                string typeName = $"{designer.NamespaceName}.{designer.UIFormName}";
                Debug.Log($"正在查找脚本类型：{typeName}");
                
                System.Type scriptType = FindScriptType(typeName);
                
                if (scriptType != null && scriptType != typeof(void))
                {
                    // 检查是否已经有该组件
                    Component existingComponent = rootObject.GetComponent(scriptType);
                    if (existingComponent == null)
                    {
                        try
                        {
                            Component newComponent = rootObject.AddComponent(scriptType);
                            if (newComponent != null)
                            {
                                Debug.Log($"成功添加 {designer.UIFormName} 脚本组件到Prefab");
                            }
                            else
                            {
                                Debug.LogWarning($"添加脚本组件失败：AddComponent返回null");
                            }
                        }
                        catch (System.Exception addEx)
                        {
                            Debug.LogError($"AddComponent失败：{addEx.Message}");
                        }
                    }
                    else
                    {
                        Debug.Log($"脚本组件 {designer.UIFormName} 已存在，跳过添加");
                    }
                }
                else
                {
                    Debug.LogWarning($"未找到脚本类型 {typeName}。可能原因：\n1. 代码尚未编译完成\n2. 命名空间或类名不正确\n3. 编译存在错误\n\n请检查Console是否有编译错误，或稍后手动重新生成Prefab。");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"添加UI脚本组件失败：{ex.Message}\n堆栈跟踪：{ex.StackTrace}");
            }
        }
        
        /// <summary>
        /// 添加UI脚本组件（UIDesignerData版本）
        /// </summary>
        private static void AddUIFormScript(GameObject rootObject, UIDesignerData designerData)
        {
            // 尝试通过反射添加生成的UI脚本组件
            try
            {
                // 查找生成的脚本类型
                string typeName = $"{designerData.namespaceName}.{designerData.uiFormName}";
                Debug.Log($"正在查找脚本类型：{typeName}");
                
                System.Type scriptType = FindScriptType(typeName);
                
                if (scriptType != null && scriptType != typeof(void))
                {
                    // 检查是否已经有该组件
                    Component existingComponent = rootObject.GetComponent(scriptType);
                    if (existingComponent == null)
                    {
                        try
                        {
                            Component newComponent = rootObject.AddComponent(scriptType);
                            if (newComponent != null)
                            {
                                Debug.Log($"成功添加 {designerData.uiFormName} 脚本组件到Prefab");
                            }
                            else
                            {
                                Debug.LogWarning($"添加脚本组件失败：AddComponent返回null");
                            }
                        }
                        catch (System.Exception addEx)
                        {
                            Debug.LogError($"AddComponent失败：{addEx.Message}");
                        }
                    }
                    else
                    {
                        Debug.Log($"脚本组件 {designerData.uiFormName} 已存在，跳过添加");
                    }
                }
                else
                {
                    Debug.LogWarning($"未找到脚本类型 {typeName}。可能原因：\n1. 代码尚未编译完成\n2. 命名空间或类名不正确\n3. 编译存在错误\n\n请检查Console是否有编译错误，或稍后手动重新生成Prefab。");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"添加UI脚本组件失败：{ex.Message}\n堆栈跟踪：{ex.StackTrace}");
            }
        }
        
        /// <summary>
        /// 查找脚本类型
        /// </summary>
        private static System.Type FindScriptType(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                Debug.LogWarning("类型名称为空，无法查找脚本类型");
                return null;
            }
            
            try
            {
                Debug.Log($"开始查找脚本类型：{typeName}");
                
                // 首先尝试直接获取类型
                System.Type type = System.Type.GetType(typeName);
                if (type != null)
                {
                    Debug.Log($"✓ 通过Type.GetType找到脚本类型：{typeName}");
                    return type;
                }
                
                // 如果直接获取失败，遍历所有程序集查找
                var assemblies = System.AppDomain.CurrentDomain.GetAssemblies();
                Debug.Log($"开始在 {assemblies.Length} 个程序集中查找类型：{typeName}");
                
                // 输出相关程序集信息
                var relevantAssemblies = assemblies.Where(a => 
                    a.GetName().Name.Contains("Assembly-CSharp") || 
                    a.GetName().Name.Contains("Game") ||
                    a.GetName().Name.Contains("UI")).ToList();
                    
                Debug.Log($"相关程序集 ({relevantAssemblies.Count}个)：{string.Join(", ", relevantAssemblies.Select(a => a.GetName().Name))}");
                
                foreach (var assembly in assemblies)
                {
                    try
                    {
                        type = assembly.GetType(typeName);
                        if (type != null)
                        {
                            Debug.Log($"✓ 在程序集 {assembly.GetName().Name} 中找到脚本类型：{typeName}");
                            return type;
                        }
                        
                        // 对于Assembly-CSharp程序集，输出所有类型以便调试
                        if (assembly.GetName().Name == "Assembly-CSharp")
                        {
                            var types = assembly.GetTypes().Where(t => t.Name.Contains("UI") || t.Namespace?.Contains("Game") == true).Take(10);
                            if (types.Any())
                            {
                                Debug.Log($"Assembly-CSharp中的UI相关类型示例：{string.Join(", ", types.Select(t => t.FullName))}");
                            }
                        }
                    }
                    catch (System.Exception ex)
                    {
                        // 只对重要程序集输出警告
                        if (assembly.GetName().Name.Contains("Assembly-CSharp"))
                        {
                            Debug.LogWarning($"在程序集 {assembly.GetName().Name} 中查找类型时出错：{ex.Message}");
                        }
                    }
                }
                
                Debug.LogWarning($"❌ 在所有程序集中都未找到类型：{typeName}\n可能原因：\n1) 代码尚未编译完成\n2) 命名空间或类名错误\n3) 存在编译错误\n4) 脚本文件未正确生成");
                return null;
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"查找脚本类型时发生异常：{ex.Message}\n堆栈跟踪：{ex.StackTrace}");
                return null;
            }
        }
        
        /// <summary>
        /// 绑定组件引用到脚本
        /// </summary>
        private static void BindComponentReferences(GameObject rootObject, UIDesigner designer)
        {
            try
            {
                // 查找生成的脚本类型
                string typeName = $"{designer.NamespaceName}.{designer.UIFormName}";
                System.Type scriptType = FindScriptType(typeName);
                
                if (scriptType != null)
                {
                    Component scriptComponent = rootObject.GetComponent(scriptType);
                    if (scriptComponent != null)
                    {
                        // 使用SerializedObject来设置字段值
                        SerializedObject serializedObject = new SerializedObject(scriptComponent);
                        
                        int bindingCount = 0;
                        foreach (var binding in designer.ComponentBindings)
                        {
                            if (binding.IsValid())
                            {
                                // 直接使用binding中的组件引用，而不是通过名称查找
                                Component component = binding.Component;
                                if (component != null)
                                {
                                    // 设置序列化字段
                                    SerializedProperty property = serializedObject.FindProperty(binding.ComponentName);
                                    if (property != null)
                                    {
                                        property.objectReferenceValue = component;
                                        bindingCount++;
                                        Debug.Log($"成功绑定组件：{binding.ComponentName} -> {component.name} ({binding.ComponentType})");
                                    }
                                    else
                                    {
                                        Debug.LogWarning($"未找到序列化字段：{binding.ComponentName}");
                                    }
                                }
                                else
                                {
                                    Debug.LogWarning($"组件引用为空：{binding.ComponentName} ({binding.ComponentType})");
                                }
                            }
                        }
                        
                        serializedObject.ApplyModifiedProperties();
                        Debug.Log($"已完成组件引用绑定，成功绑定 {bindingCount} 个组件");
                    }
                    else
                    {
                        Debug.LogWarning($"未找到脚本组件 {typeName}，跳过组件绑定");
                    }
                }
                else
                {
                    Debug.LogWarning($"未找到脚本类型 {typeName}，跳过组件绑定");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"绑定组件引用失败：{ex.Message}");
            }
        }
        
        /// <summary>
        /// 绑定组件引用（UIDesignerData版本）
        /// </summary>
        private static void BindComponentReferences(GameObject rootObject, UIDesignerData designerData)
        {
            try
            {
                // 查找生成的脚本类型
                string typeName = $"{designerData.namespaceName}.{designerData.uiFormName}";
                System.Type scriptType = FindScriptType(typeName);
                
                if (scriptType != null)
                {
                    Component scriptComponent = rootObject.GetComponent(scriptType);
                    if (scriptComponent != null)
                    {
                        // 使用SerializedObject来设置字段值
                        SerializedObject serializedObject = new SerializedObject(scriptComponent);
                        
                        int bindingCount = 0;
                        foreach (var binding in designerData.componentBindings)
                        {
                            if (binding.IsValid())
                            {
                                // 直接使用binding中的组件引用，而不是通过名称查找
                                Component component = binding.Component;
                                if (component != null)
                                {
                                    // 设置序列化字段
                                    SerializedProperty property = serializedObject.FindProperty(binding.ComponentName);
                                    if (property != null)
                                    {
                                        property.objectReferenceValue = component;
                                        bindingCount++;
                                        Debug.Log($"成功绑定组件：{binding.ComponentName} -> {component.name} ({binding.ComponentType})");
                                    }
                                    else
                                    {
                                        Debug.LogWarning($"未找到序列化字段：{binding.ComponentName}");
                                    }
                                }
                                else
                                {
                                    Debug.LogWarning($"组件引用为空：{binding.ComponentName} ({binding.ComponentType})");
                                }
                            }
                        }
                        
                        serializedObject.ApplyModifiedProperties();
                        Debug.Log($"已完成组件引用绑定，成功绑定 {bindingCount} 个组件");
                    }
                    else
                    {
                        Debug.LogWarning($"未找到脚本组件 {typeName}，跳过组件绑定");
                    }
                }
                else
                {
                    Debug.LogWarning($"未找到脚本类型 {typeName}，跳过组件绑定");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"绑定组件引用失败：{ex.Message}");
            }
        }
        
        /// <summary>
        /// 在子对象中查找指定的组件
        /// </summary>
        private static Component FindComponentInChildren(GameObject root, UIComponentBinding binding)
        {
            // 首先尝试通过名称查找
            Transform child = root.transform.Find(binding.ComponentName);
            if (child != null)
            {
                // 根据组件类型获取对应的组件
                System.Type componentType = GetComponentType(binding.ComponentType);
                if (componentType != null)
                {
                    return child.GetComponent(componentType);
                }
            }
            
            // 如果通过名称找不到，尝试在所有子对象中查找
            Component[] components = root.GetComponentsInChildren(GetComponentType(binding.ComponentType), true);
            return components.Length > 0 ? components[0] : null;
        }
        
        /// <summary>
        /// 根据组件类型字符串获取对应的Type
        /// </summary>
        private static System.Type GetComponentType(string componentTypeName)
        {
            switch (componentTypeName)
            {
                case "Button": return typeof(Button);
                case "Text": return typeof(Text);
                case "Image": return typeof(Image);
                case "InputField": return typeof(InputField);
                case "Toggle": return typeof(Toggle);
                case "Slider": return typeof(Slider);
                case "Dropdown": return typeof(Dropdown);
                case "TextMeshProUGUI": return typeof(TMPro.TextMeshProUGUI);
                case "TMP_InputField": return typeof(TMPro.TMP_InputField);
                case "TMP_Dropdown": return typeof(TMPro.TMP_Dropdown);
                default: return null;
            }
        }
        
        /// <summary>
        /// 保存为Prefab
        /// </summary>
        private static void SaveAsPrefab(GameObject obj, string prefabPath)
        {
            // 确保目录存在
            string directory = Path.GetDirectoryName(prefabPath);
            if (!string.IsNullOrEmpty(directory))
            {
                string fullDirectory = Path.Combine(Application.dataPath.Replace("Assets", ""), directory);
                if (!Directory.Exists(fullDirectory))
                {
                    Directory.CreateDirectory(fullDirectory);
                }
            }
            
            // 保存为Prefab
            PrefabUtility.SaveAsPrefabAsset(obj, prefabPath);
        }
    }
}