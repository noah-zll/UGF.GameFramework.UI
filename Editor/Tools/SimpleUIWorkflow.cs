using System;
using UnityEngine;
using UnityEngine.UI;
using UnityEditor;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using UGF.GameFramework.UI;

namespace UGF.GameFramework.UI.Editor
{
    /// <summary>
    /// 简化的UI工作流程
    /// 移除复杂的状态管理和事件系统，采用直接调用的方式
    /// </summary>
    public static class SimpleUIWorkflow
    {
        /// <summary>
        /// 第一步：生成代码
        /// </summary>
        public static bool GenerateCode(UIDesigner designer)
        {
            if (designer == null || string.IsNullOrEmpty(designer.UIFormName))
            {
                Debug.LogError("UIDesigner或类名为空，无法生成代码");
                return false;
            }

            try
            {
                Debug.Log($"[SimpleUIWorkflow] 开始生成代码: {designer.UIFormName}");
                
                // 获取输出目录
                string outputDirectory = GetOutputDirectory();
                if (!Directory.Exists(outputDirectory))
                {
                    Directory.CreateDirectory(outputDirectory);
                }
                
                // 生成绑定类
                string bindingCode = GenerateBindingClass(designer);
                string bindingFilePath = Path.Combine(outputDirectory, $"{designer.UIFormName}.Generated.cs");
                File.WriteAllText(bindingFilePath, bindingCode);
                
                // 生成或更新业务逻辑类
                string logicFilePath = Path.Combine(outputDirectory, $"{designer.UIFormName}.cs");
                if (!File.Exists(logicFilePath))
                {
                    // 文件不存在时创建新文件
                    string logicCode = GenerateLogicClass(designer);
                    File.WriteAllText(logicFilePath, logicCode);
                }
                else
                {
                    // 文件存在时更新事件绑定
                    UpdateLogicClassEvents(logicFilePath, designer.ComponentBindings);
                }
                
                // 刷新资源数据库
                AssetDatabase.Refresh();
                
                Debug.Log($"[SimpleUIWorkflow] 代码生成完成: {designer.UIFormName}");
                return true;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SimpleUIWorkflow] 代码生成失败: {ex.Message}");
                return false;
            }
        }
        
        /// <summary>
        /// 第二步：保存为Prefab（包含脚本绑定、组件绑定、清理设计脚本）
        /// </summary>
        public static bool SaveAsPrefab(UIDesigner designer, string prefabPath)
        {
            if (designer == null)
            {
                Debug.LogError("UIDesigner为空，无法保存Prefab");
                return false;
            }
            
            try
            {
                Debug.Log($"[SimpleUIWorkflow] 开始保存Prefab: {designer.UIFormName} -> {prefabPath}");
                
                GameObject gameObject = designer.gameObject;
                
                // 1. 挂载生成的脚本组件
                if (!AttachGeneratedScript(designer, gameObject))
                {
                    return false;
                }
                
                // 2. 绑定组件变量
                if (!BindComponentVariables(designer, gameObject))
                {
                    return false;
                }
                
                // 3. 清理设计脚本
                CleanupDesignScripts(gameObject);
                
                // 4. 保存为Prefab
                SavePrefab(gameObject, prefabPath);
                
                Debug.Log($"[SimpleUIWorkflow] Prefab保存完成: {prefabPath}");
                return true;
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SimpleUIWorkflow] Prefab保存失败: {ex.Message}");
                return false;
            }
        }
        
        #region 私有方法 - 代码生成
        
        /// <summary>
        /// 生成绑定类代码
        /// </summary>
        private static string GenerateBindingClass(UIDesigner designer)
        {
            var sb = new System.Text.StringBuilder();
            
            // 文件头注释
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("// 此文件由UIDesigner自动生成，请勿手动修改");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine();
            
            // 命名空间和引用
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEngine.UI;");
            sb.AppendLine("using UGF.GameFramework.UI;");
            
            // 检查是否需要TMPro命名空间
            bool needsTMPro = designer.ComponentBindings.Any(b => b.IsValid() && 
                (GetComponentTypeName(b.Component).Contains("TextMeshPro") || GetComponentTypeName(b.Component).Contains("TMP")));
            if (needsTMPro)
            {
                sb.AppendLine("using TMPro;");
            }
            sb.AppendLine();
            
            // 命名空间声明
            if (!string.IsNullOrEmpty(designer.NamespaceName))
            {
                sb.AppendLine($"namespace {designer.NamespaceName}");
                sb.AppendLine("{");
            }
            
            // 类定义
            string indent = !string.IsNullOrEmpty(designer.NamespaceName) ? "    " : "";
            sb.AppendLine($"{indent}public partial class {designer.UIFormName} : UIFormBase");
            sb.AppendLine($"{indent}{{");
            
            // 生成序列化字段
            foreach (var binding in designer.ComponentBindings)
            {
                if (binding.IsValid())
                {
                    string typeName = GetComponentTypeName(binding.Component);
                    sb.AppendLine($"{indent}    [SerializeField] private {typeName} {binding.ComponentName};");
                }
            }
            
            sb.AppendLine();
            
            // 生成公共属性
            foreach (var binding in designer.ComponentBindings)
            {
                if (binding.IsValid())
                {
                    string typeName = GetComponentTypeName(binding.Component);
                    sb.AppendLine($"{indent}    /// <summary>");
                    sb.AppendLine($"{indent}    /// {binding.ComponentName} 组件");
                    sb.AppendLine($"{indent}    /// </summary>");
                    sb.AppendLine($"{indent}    public {typeName} {char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1)} => {binding.ComponentName};");
                }
            }
            
            sb.AppendLine();
            
            // 生成BindComponents方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 绑定UI组件（自动生成）");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    protected override void BindComponents()");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.BindComponents();");
            sb.AppendLine($"{indent}        // 组件已通过序列化字段直接绑定，无需运行时查找");
            
            // 为每个绑定生成验证代码
            foreach (var binding in designer.ComponentBindings)
            {
                if (binding.IsValid())
                {
                    sb.AppendLine($"{indent}        // 验证组件: {binding.ComponentName}");
                    sb.AppendLine($"{indent}        if ({binding.ComponentName} == null)");
                    sb.AppendLine($"{indent}            Debug.LogWarning($\"组件 {binding.ComponentName} 未正确绑定\");");
                }
            }
            
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 重写OnInit方法
            sb.AppendLine($"{indent}    protected override void OnInit(object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.OnInit(userData);");
            sb.AppendLine($"{indent}        BindComponents();");
            sb.AppendLine($"{indent}        InitializeEvents();");
            sb.AppendLine($"{indent}        OnInitCustom(userData);");
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 生成事件初始化方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 初始化事件绑定（自动生成）");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    private void InitializeEvents()");
            sb.AppendLine($"{indent}    {{");
            
            // 为Button组件生成事件绑定
            foreach (var binding in designer.ComponentBindings)
            {
                if (binding.IsValid() && GetComponentTypeName(binding.Component) == "Button")
                {
                    string methodName = char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1);
                    sb.AppendLine($"{indent}        // 绑定按钮事件: {binding.ComponentName}");
                    sb.AppendLine($"{indent}        {binding.ComponentName}.onClick.AddListener(On{methodName}Click);");
                }
            }
            
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 自定义初始化方法（分部方法）
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 自定义初始化逻辑（在业务逻辑类中实现）");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    partial void OnInitCustom(object userData);");
            
            sb.AppendLine($"{indent}}}");
            
            // 关闭命名空间
            if (!string.IsNullOrEmpty(designer.NamespaceName))
            {
                sb.AppendLine("}");
            }
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 生成业务逻辑类代码
        /// </summary>
        private static string GenerateLogicClass(UIDesigner designer)
        {
            var sb = new System.Text.StringBuilder();
            
            // 文件头注释
            sb.AppendLine("// 业务逻辑类 - 可编辑");
            sb.AppendLine("// 此文件用于实现UI的业务逻辑，可以自由编辑");
            sb.AppendLine();
            
            // 命名空间和引用
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using UnityEngine.UI;");
            sb.AppendLine("using UGF.GameFramework.UI;");
            
            // 检查是否需要TMPro命名空间
            bool needsTMPro = designer.ComponentBindings.Any(b => b.IsValid() && 
                (GetComponentTypeName(b.Component).Contains("TextMeshPro") || GetComponentTypeName(b.Component).Contains("TMP")));
            if (needsTMPro)
            {
                sb.AppendLine("using TMPro;");
            }
            sb.AppendLine();
            
            // 命名空间声明
            if (!string.IsNullOrEmpty(designer.NamespaceName))
            {
                sb.AppendLine($"namespace {designer.NamespaceName}");
                sb.AppendLine("{");
            }
            
            // 类定义
            string indent = !string.IsNullOrEmpty(designer.NamespaceName) ? "    " : "";
            sb.AppendLine($"{indent}public partial class {designer.UIFormName}");
            sb.AppendLine($"{indent}{{");
            
            // 实现自定义初始化方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 自定义初始化逻辑");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    partial void OnInitCustom(object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        // 在这里添加自定义初始化逻辑");
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            // 生成按钮事件处理方法
            foreach (var binding in designer.ComponentBindings)
            {
                if (binding.IsValid() && GetComponentTypeName(binding.Component) == "Button")
                {
                    string methodName = char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1);
                    sb.AppendLine($"{indent}    /// <summary>");
                    sb.AppendLine($"{indent}    /// {binding.ComponentName} 按钮点击事件");
                    sb.AppendLine($"{indent}    /// </summary>");
                    sb.AppendLine($"{indent}    private void On{methodName}Click()");
                    sb.AppendLine($"{indent}    {{");
                    sb.AppendLine($"{indent}        Debug.Log(\"点击了 {binding.ComponentName}\");");
                    sb.AppendLine($"{indent}        // TODO: 实现 {binding.ComponentName} 按钮点击逻辑");
                    sb.AppendLine($"{indent}    }}");
                    sb.AppendLine();
                }
            }
            
            // 生成生命周期方法
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 界面打开时调用");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    protected override void OnOpen(object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.OnOpen(userData);");
            sb.AppendLine($"{indent}        // TODO: 实现界面打开逻辑");
            sb.AppendLine($"{indent}    }}");
            sb.AppendLine();
            
            sb.AppendLine($"{indent}    /// <summary>");
            sb.AppendLine($"{indent}    /// 界面关闭时调用");
            sb.AppendLine($"{indent}    /// </summary>");
            sb.AppendLine($"{indent}    protected override void OnClose(bool isShutdown, object userData)");
            sb.AppendLine($"{indent}    {{");
            sb.AppendLine($"{indent}        base.OnClose(isShutdown, userData);");
            sb.AppendLine($"{indent}        // TODO: 实现界面关闭逻辑");
            sb.AppendLine($"{indent}    }}");
            
            sb.AppendLine($"{indent}}}");
            
            // 关闭命名空间
            if (!string.IsNullOrEmpty(designer.NamespaceName))
            {
                sb.AppendLine("}");
            }
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 更新业务逻辑类的事件处理方法
        /// </summary>
        private static void UpdateLogicClassEvents(string filePath, List<UIComponentBinding> bindings)
        {
            if (!File.Exists(filePath))
                return;

            string content = File.ReadAllText(filePath);
            var buttonBindings = bindings.Where(b => b.IsValid() && GetComponentTypeName(b.Component) == "Button").ToList();
            
            // 添加缺失的事件处理方法
            content = AddMissingEventHandlers(content, buttonBindings);
            
            File.WriteAllText(filePath, content);
        }
        
        /// <summary>
        /// 添加缺失的事件处理方法
        /// </summary>
        private static string AddMissingEventHandlers(string content, List<UIComponentBinding> buttonBindings)
        {
            var sb = new System.Text.StringBuilder(content);
            
            foreach (var binding in buttonBindings)
            {
                string methodName = $"On{char.ToUpper(binding.ComponentName[0]) + binding.ComponentName.Substring(1)}Click";
                if (!content.Contains(methodName))
                {
                    // 在最后一个方法之前插入新的事件处理方法
                    int insertPos = FindLastMethodEnd(content);
                    if (insertPos != -1)
                    {
                        string newMethod = $"\n    /// <summary>\n    /// {binding.ComponentName} 按钮点击事件\n    /// </summary>\n    private void {methodName}()\n    {{\n        Debug.Log(\"点击了 {binding.ComponentName}\");\n        // TODO: 实现 {binding.ComponentName} 按钮点击逻辑\n    }}\n";
                        sb.Insert(insertPos, newMethod);
                    }
                }
            }
            
            return sb.ToString();
        }
        
        /// <summary>
        /// 查找最后一个方法的结束位置
        /// </summary>
        private static int FindLastMethodEnd(string content)
        {
            // 查找类的结束大括号之前的位置
            int lastBrace = content.LastIndexOf('}');
            if (lastBrace != -1)
            {
                // 向前查找，跳过空白字符
                for (int i = lastBrace - 1; i >= 0; i--)
                {
                    if (!char.IsWhiteSpace(content[i]))
                    {
                        return i + 1;
                    }
                }
            }
            return -1;
        }
        
        #endregion
        
        #region 私有方法 - Prefab生成
        
        /// <summary>
        /// 挂载生成的脚本组件
        /// </summary>
        private static bool AttachGeneratedScript(UIDesigner designer, GameObject gameObject)
        {
            try
            {
                Debug.Log($"[SimpleUIWorkflow] 挂载脚本组件: {designer.UIFormName}");
                
                // 查找生成的脚本类型
                string typeName = $"{designer.NamespaceName}.{designer.UIFormName}";
                Type scriptType = FindScriptType(typeName);
                
                if (scriptType == null)
                {
                    Debug.LogError($"找不到脚本类型: {typeName}");
                    return false;
                }
                
                // 检查是否已经挂载
                if (gameObject.GetComponent(scriptType) != null)
                {
                    Debug.Log($"脚本组件已存在: {designer.UIFormName}");
                    return true;
                }
                
                // 挂载脚本组件
                gameObject.AddComponent(scriptType);
                Debug.Log($"成功挂载脚本组件: {designer.UIFormName}");
                return true;
            }
            catch (Exception ex)
            {
                Debug.LogError($"挂载脚本组件失败: {ex.Message}");
                return false;
            }
        }
        
        /// <summary>
        /// 绑定组件变量
        /// </summary>
        private static bool BindComponentVariables(UIDesigner designer, GameObject gameObject)
        {
            try
            {
                Debug.Log($"[SimpleUIWorkflow] 绑定组件变量: {designer.UIFormName}");
                
                // 获取脚本组件
                string typeName = $"{designer.NamespaceName}.{designer.UIFormName}";
                Type scriptType = FindScriptType(typeName);
                var scriptComponent = gameObject.GetComponent(scriptType);
                
                if (scriptComponent == null)
                {
                    Debug.LogError($"找不到脚本组件: {typeName}");
                    return false;
                }
                
                // 绑定每个组件
                foreach (var binding in designer.ComponentBindings)
                {
                    if (!binding.IsValid()) continue;
                    
                    var field = scriptType.GetField(binding.ComponentName, BindingFlags.NonPublic | BindingFlags.Instance);
                    if (field != null)
                    {
                        field.SetValue(scriptComponent, binding.Component);
                        Debug.Log($"绑定组件变量: {binding.ComponentName} -> {binding.Component.name}");
                    }
                }
                
                // 标记为脏数据以保存更改
                EditorUtility.SetDirty(scriptComponent);
                return true;
            }
            catch (Exception ex)
            {
                Debug.LogError($"绑定组件变量失败: {ex.Message}");
                return false;
            }
        }
        
        /// <summary>
        /// 清理设计脚本
        /// </summary>
        private static void CleanupDesignScripts(GameObject gameObject)
        {
            Debug.Log($"[SimpleUIWorkflow] 清理设计脚本: {gameObject.name}");
            
            // 移除UIDesigner组件
            var designer = gameObject.GetComponent<UIDesigner>();
            if (designer != null)
            {
                UnityEngine.Object.DestroyImmediate(designer, true);
            }
            
            // 移除所有UIComponentBinder组件
            var binders = gameObject.GetComponentsInChildren<UIComponentBinder>(true);
            foreach (var binder in binders)
            {
                UnityEngine.Object.DestroyImmediate(binder, true);
            }
        }
        
        /// <summary>
        /// 保存为Prefab
        /// </summary>
        private static void SavePrefab(GameObject gameObject, string prefabPath)
        {
            Debug.Log($"[SimpleUIWorkflow] 保存Prefab: {prefabPath}");
            
            // 确保目录存在
            string directory = Path.GetDirectoryName(prefabPath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
                AssetDatabase.Refresh();
            }
            
            // 保存为Prefab
            GameObject prefab = PrefabUtility.SaveAsPrefabAsset(gameObject, prefabPath);
            if (prefab == null)
            {
                throw new Exception($"保存Prefab失败: {prefabPath}");
            }
            
            Debug.Log($"[SimpleUIWorkflow] Prefab保存成功: {prefabPath}");
            
            // 刷新资源数据库
            AssetDatabase.Refresh();
            
            // 选中生成的Prefab
            Selection.activeObject = prefab;
            EditorGUIUtility.PingObject(prefab);
        }
        
        #endregion
        
        #region 工具方法
        
        /// <summary>
        /// 获取输出目录
        /// </summary>
        private static string GetOutputDirectory()
        {
            return Path.Combine(Application.dataPath, "Scripts", "UI", "Generated");
        }
        
        /// <summary>
        /// 查找脚本类型
        /// </summary>
        private static Type FindScriptType(string typeName)
        {
            foreach (var assembly in System.AppDomain.CurrentDomain.GetAssemblies())
            {
                var type = assembly.GetType(typeName);
                if (type != null)
                {
                    return type;
                }
            }
            return null;
        }
        
        /// <summary>
        /// 获取组件类型名称
        /// </summary>
        private static string GetComponentTypeName(Component component)
        {
            if (component == null) return "Component";
            
            Type type = component.GetType();
            
            // 处理常见的UI组件类型
            if (type == typeof(Button)) return "Button";
            if (type == typeof(Text)) return "Text";
            if (type == typeof(Image)) return "Image";
            if (type == typeof(InputField)) return "InputField";
            if (type == typeof(Slider)) return "Slider";
            if (type == typeof(Toggle)) return "Toggle";
            if (type == typeof(Dropdown)) return "Dropdown";
            if (type == typeof(ScrollRect)) return "ScrollRect";
            if (type == typeof(RectTransform)) return "RectTransform";
            if (type == typeof(Transform)) return "Transform";
            
            // 处理TMPro组件
            string typeName = type.Name;
            if (typeName.Contains("TextMeshPro"))
            {
                if (typeName == "TextMeshProUGUI") return "TextMeshProUGUI";
                if (typeName == "TextMeshPro") return "TextMeshPro";
                if (typeName.Contains("InputField")) return "TMP_InputField";
                if (typeName.Contains("Dropdown")) return "TMP_Dropdown";
            }
            
            // 处理其他TMP组件
            if (typeName.StartsWith("TMP_"))
            {
                return typeName;
            }
            
            return typeName;
        }
        
        /// <summary>
        /// 获取组件在层级中的路径
        /// </summary>
        private static string GetComponentPath(Component component, GameObject root)
        {
            if (component == null || root == null) return "";
            
            Transform current = component.transform;
            Transform rootTransform = root.transform;
            
            if (current == rootTransform)
            {
                return "";
            }
            
            List<string> pathParts = new List<string>();
            
            while (current != null && current != rootTransform)
            {
                pathParts.Insert(0, current.name);
                current = current.parent;
            }
            
            return string.Join("/", pathParts);
        }
        
        #endregion
    }
}